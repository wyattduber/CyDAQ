#!/bin/sh

# ==========================  Configfs for USB serial and USB ethernet ==========================  
# Ensures configfs is enabled
mount -t configfs none /sys/kernel/config 

modprobe libcomposite

cd /sys/kernel/config/usb_gadget/
mkdir g && cd g

echo 0x1d6b > idVendor  # Linux Foundation
echo 0x0104 > idProduct # Multifunction Composite Gadget
echo 0x0101 > bcdDevice # v1.0.1 - increment when changes are made
echo 0x0200 > bcdUSB    # USB 2.0

#echo "64" > bMaxPacketSize0 # need to test this some more

# required for windows to use it's correct RNDIS driver
# https://irq5.io/2016/12/22/raspberry-pi-zero-as-multiple-usb-gadgets/
echo 0xEF > bDeviceClass
echo 0x02 > bDeviceSubClass
echo 0x01 > bDeviceProtocol

mkdir -p strings/0x409
echo "xxxxxxxxxxxx" > strings/0x409/serialnumber
echo "ISU"        > strings/0x409/manufacturer
echo "CyDAQ"   > strings/0x409/product

mkdir -p functions/acm.usb0    # serial (g_serial)

mkdir -p functions/rndis.usb0  # network (g_ether)
echo "15" > functions/rndis.usb0/qmult

mkdir -p configs/c.1
echo 250 > configs/c.1/MaxPower
echo 0xE0 > configs/c.1/bmAttributes

ln -s functions/rndis.usb0 configs/c.1/
ln -s functions/acm.usb0   configs/c.1/

# OS descriptors - again for Windows to use the correct drivers
echo 1       > os_desc/use
echo 0xcd    > os_desc/b_vendor_code
echo MSFT100 > os_desc/qw_sign
echo RNDIS   > functions/rndis.usb0/os_desc/interface.rndis/compatible_id
echo 5162001 > functions/rndis.usb0/os_desc/interface.rndis/sub_compatible_id
ln -s configs/c.1 os_desc

# Start the drivers
ls /sys/class/udc/ > UDC

# Enable the network interface
ifconfig usb0 169.254.7.2 up
# ========================================================================================================

# Enable some devices on bootup. Petalinux suspends them, making the baremetal app unable to make changes. Enabling them here stops that.
echo on > /sys/bus/i2c/devices/i2c-1/device/power/control
echo on > /sys/bus/iio/devices/iio:device0/power/control

# Start the CyDAQ_comm.elf application, which launches CyDAQ_sampling.elf on another CPU
# NOTE: There is most likely a more stable way of doing this (systemd), but as the user will have # to restart the whole cydaq anyways to restart the app, it's probably unneeded.
#cd /home/root
#./CyDAQ_comm.elf &


# Add any new startup commands below



